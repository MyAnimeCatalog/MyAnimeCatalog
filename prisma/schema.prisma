// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String  
    type              String  
    provider          String  
    providerAccountId String  
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String? 
    scope             String? 
    id_token          String? @db.Text
    session_state     String? 
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    bio           String?
    toWatch       ToWatch[]
    watching      Watching[]
    watched       Watched[]
}


model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
} 

model Anime {
  id        String @id @default(cuid())
  titleEn   String @unique
  titleJP   String 
  image     String
  malID     String
  synopsis  String @db.Text
  rating    String
  genre     String
  score     Decimal
  scored_by Int
  rank      Int
  toWatch   ToWatch[]
  watching  Watching[]
  watched   Watched[]
}

model ToWatch {
  id        String @id @default(cuid())
  userId    String 
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  animeId   String 
  anime     Anime @relation(fields: [animeId], references: [id], onDelete: Cascade)

@@index([userId])
@@index([animeId])
}

model Watching {
  id        String @id @default(cuid())
  userId    String 
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  animeId   String 
  anime     Anime @relation(fields: [animeId], references: [id], onDelete: Cascade)
@@index([userId])
@@index([animeId])
}

model Watched {
  id        String @id @default(cuid())
  userId    String 
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  animeId   String 
  anime     Anime @relation(fields: [animeId], references: [id], onDelete: Cascade)
@@index([userId])
@@index([animeId])
}
